; Definicion de variables base las cuales las utilizaremos para realizar validaciones de si encontramos la operacion base (op exp exp)
(define parentesis1 "") ;variable la cual representa el parentesis abierto de la operacion base
(define operacion "") ;variable la cual representa a la operacion que se este realizando 
(define numero1 "") ;variable la cual representa al primer numero que se encuentre
(define numero2 "") ;variable la cual representa al segundo numero que se encuentre
(define parentesis2 "") ;variable la cual representa el parentesis cerrado de la operacion base
(define indexParentesis1 0) ;variable la cual utilizaremos para saber la posicion del parentesis abierto
(define indexParentesis2 0) ;variable la cual utilizaremos para saber la posicion del parentesis cerrado
(define str1 "");variable la cual la utilizaremos para poder almacenar la operacion antes de que se encuentre el parentesis abierto de la operacion base
(define str2 "");variable la cual la utilizaremos para poder almacenar la operacion despues de que se encuentre el  parentesis cerrado de la operacion base
(define bandera "no"); variable la cual nos permite verificar si la operacion la estaremos realizando o no
(define validNumber ""); variable la cual la utilizaremos como bandera para verificar si nuestro numero es valido
(define onlyNumber ""); variable que utilizaremos para validar si cuando ingresemos solo un numero sera permitido solo desplegarlo
(define accParentesis1 0); variable la cual utilizaremos para llevar un contador de los parentesis abiertos
(define accParentesis2 0); variable la cual utilizaremos para llevar un contador de los parentesis cerrados
(define validParentesis "no"); variable la cual utilizaremos para saber si los parentesis estan correctos para despues poder realizar una operacion 
(define spaceCounter 0) ;variable la cual la utilizaremos como un contador de espacios en blanco
(define canSearch "no"); variable la cual la utilizaremos para verificar si se pueden operar cosas como (((+ 4 5)))
(define resOperacion 0); variable la cual sera el resultado de nuestras operaciones y la resplazaremos en donde se encontro la operacion base
(define noOperation "no"); variable la cual la utilizaremos para saber si ya esta creada una operacion o no
(define firstCut 1); variable la cual la utilizaremos para hacer el primer corte de una operacion


;Cada función recibe n1 y n2 como parámetros siendo éstos dos valores

;Definición de función suma que se utilizará para realizar dicha operación 
(define (suma n1 n2)
  (set! resOperacion (+ n1 n2))
  (set! resOperacion (number->string resOperacion))
  resOperacion
  )
;Definición de función resta que se utilizará para realizar dicha operación
(define (resta n1 n2)
  (set! resOperacion (- n1 n2))
  (set! resOperacion (number->string resOperacion))
  resOperacion
  )
;Definición de función multiplicación que se utilizará para realizar dicha operación
(define (multiplicacion n1 n2)
  (set! resOperacion (* n1 n2))
  (set! resOperacion (number->string resOperacion))
  resOperacion
  )

;Definición de función división que se utilizará para realizar dicha operación
;Validamos que no se permita dividir dentro de cero, si se realiza esta operación se mostrará un mensaje que indica la imposibilidad de realizar dicha operación
(define (division n1 n2)
  (if (= n2 0)
      (begin
        (display "no es posible dividir dentro de cero")
        (set! parentesis1 "")
        (set! operacion "")
        (set! numero1 "")
        (set! numero2 "")
        (set! parentesis2 "")
        (set! indexParentesis1 0)
        (set! indexParentesis2 0)
        (set! str1 "")
        (set! str2 "")
        (set! bandera "no")
        (set! spaceCounter 0)
        (set! resOperacion 0)
        (set! accParentesis1 0)
        (set! accParentesis2 0)
        (main)
        )     
      (begin
        (set! resOperacion (/ n1 n2))
        (set! resOperacion (exact->inexact resOperacion))
        (set! resOperacion (number->string resOperacion))
        resOperacion
        )
      )
  )

;Definición de función raizcuadad que se utilizará para obtener la raíz cuadrada de un número n1
;Validamos al intentar obtener la raíz cuadrada de un número negativo devuelva el mensaje de imposiblidad para realizar dicha operación
(define (raizcuadad n1)
  (if (< n1 0)
      (begin
        (display "no es posible operar la raiz cuadrada de un numero negativo")
        (set! parentesis1 "")
        (set! operacion "")
        (set! numero1 "")
        (set! numero2 "")
        (set! parentesis2 "")
        (set! indexParentesis1 0)
        (set! indexParentesis2 0)
        (set! str1 "")
        (set! str2 "")
        (set! bandera "no")
        (set! spaceCounter 0)
        (set! resOperacion 0)
        (set! accParentesis1 0)
        (set! accParentesis2 0)
        (main)
        )
      (begin
        (set! resOperacion (sqrt n1))
        (set! resOperacion (number->string resOperacion))
        resOperacion
        )
     
      )
  )

;Definición de función exponente que se utilizará para obtener elevar al cuadrado el número n1
(define (exponente n1)
  (set! resOperacion (* n1 n1))
  (set! resOperacion (number->string resOperacion))
  resOperacion
  )
;Definición de función seno que se utilizará para obtener el seno del número n1
(define (seno n1)
  (set! n1 (/ (* n1 3.14) 180))
  (set! resOperacion (sin n1))
  (set! resOperacion (radians->degrees resOperacion))
  (set! resOperacion (number->string resOperacion))
  resOperacion
  )
;Definición de función coseno que se utilizará para obtener el seno del número n1
(define (coseno n1)
  (set! n1 (/ (* n1 3.14) 180))
  (set! resOperacion (cos n1))
  (set! resOperacion (number->string resOperacion))
  resOperacion
  )

;Definición de función tangente que se utilizará para obtener el seno del número n1
(define (tangente n1)
  (set! n1 (/ (* n1 3.14) 180))
  (set! resOperacion (tan n1))
  (set! resOperacion (number->string resOperacion))
  (set! resOperacion (radians->degrees resOperacion))
  resOperacion
  )
;Definición de función mod que se utilizará para obtener el resto o residuo de la división de dos números n1 y n2
(define (mod n1 n2)
  (set! resOperacion (remainder n1 n2))
  (set! resOperacion (number->string resOperacion))
  resOperacion
  )

;Definición de función fact que se utilizará para obtener el factorial de un número n1
(define (fact n1)
  (if (= n1 0)
      1
      (* n1 (fact (- n1 1)))
      )
  )
;Definición de función cociente que se utilizará para obtener el cociente de la división de dos números, n1 y n2
;Validamos que no se permita dividir dentro de cero, si se realiza esta operación se mostrará un mensaje que indica la imposibilidad de realizar dicha operación
(define (cociente n1 n2)
  (if (= n2 0)
      (begin
        (display "no es posible dividir dentro de cero")
        (main)
        )
      (begin
        (set! resOperacion (quotient n1 n2))
        (set! resOperacion (number->string resOperacion))
        resOperacion
        )        
      )
  ) 

;Funcion resultado la cual se encarga de verificar que operacion se esta ingresando y a base de eso mandarla a llamar a las funciones las cuales operen
; esos mismos resultados, y si son anidadas que se encargue de operarlos y volver a buscar una operacion base, despliega el resultado final.
;Recibe como parametros un string->str el cual es la operacion base que se mandara a llamar
(define (resultado str)
  (begin
    (if (or (equal? operacion "fact!") (equal? operacion  "cos") (equal? operacion  "sen") (equal? operacion  "tan") (equal? operacion  "sqr") (equal? operacion  "sqroot"))
        (set! spaceCounter 2)
        )
    (if (= spaceCounter 2)
        (begin
          (if (and(= indexParentesis1 0)(= indexParentesis2 (-(string-length str)1)))
              (begin
                (display "El resultado de su operacion es ")                
                (if (equal? operacion  "+")
                    (display (suma numero1 numero2))
                    )
                (if (equal? operacion  "-")
                    (display (resta numero1 numero2))
                    )
                (if (equal? operacion  "*")
                    (display (multiplicacion numero1 numero2))
                    )
                (if (equal? operacion  "/")
                    (display (division numero1 numero2))
                    )
                (if (equal? operacion  "cos")
                    (display (coseno numero1))
                    )
                (if (equal? operacion  "sen")
                    (display (seno numero1))
                    )
                (if (equal? operacion  "tan")
                    (display (tangente numero1))
                    )
                (if (equal? operacion  "sqr")
                    (display (exponente numero1))
                    )
                (if (equal? operacion  "sqroot")
                    (display (raizcuadad numero1))
                    )
                (if (equal? operacion  "div")
                    (display (cociente numero1 numero2))
                    )
                (if (equal? operacion  "%")
                    (display (mod numero1 numero2))
                    )
                (if (equal? operacion  "fact!")
                    (display (fact numero1))
                    )
                (newline)
                )
              (begin
                (set! str1 (substring str 0 indexParentesis1))
                (set! str2 (substring str (+ indexParentesis2 1) (string-length str)))
                (if (equal? operacion "+")
                    (begin
                      (set! str (string-append str1 (suma numero1 numero2)))
                      (set! str (string-append str str2))
                      (operaciones str 0 0 1)
                      )
                    )
                (if (equal? operacion "-")
                    (begin
                      (set! str (string-append str1 (resta numero1 numero2)))
                      (set! str (string-append str str2))    
                      (operaciones str 0 0 1)
                      )             
                    )
                (if (equal? operacion "*")
                    (begin
                      (set! str (string-append str1 (multiplicacion numero1 numero2)))
                      (set! str (string-append str str2))
                      (operaciones str 0 0 1)
                      )              
                    )
                (if (equal? operacion "/")
                    (begin
                      (set! str (string-append str1 (division numero1 numero2)))
                      (set! str (string-append str str2))   
                      (operaciones str 0 0 1)
                      )             
                    )
                (if (equal? operacion "cos")
                    (begin
                      (set! str (string-append str1 (coseno numero1)))
                      (set! str (string-append str str2))   
                      (operaciones str 0 0 1)
                      )             
                    )
                (if (equal? operacion "sen")
                    (begin
                      (set! str (string-append str1 (seno numero1)))
                      (set! str (string-append str str2))  
                      (operaciones str 0 0 1)
                      )             
                    )
                (if (equal? operacion "tan")
                    (begin
                      (set! str (string-append str1 (tangente numero1)))
                      (set! str (string-append str str2))    
                      (operaciones str 0 0 1)
                      )             
                    )
                (if (equal? operacion "sqr")
                    (begin
                      (set! str (string-append str1 (exponente numero1)))
                      (set! str (string-append str str2))  
                      (operaciones str 0 0 1)
                      )             
                    )
                (if (equal? operacion "sqroot")
                    (begin
                      (set! str (string-append str1 (raizcuad numero1)))
                      (set! str (string-append str str2)) 
                      (operaciones str 0 0 1)
                      )             
                    )
                (if (equal? operacion "div")
                    (begin
                      (display "Su operacion div no se puede operar ya que esta anidada")
                      (set! parentesis1 "")
                      (set! operacion "")
                      (set! numero1 "")
                      (set! numero2 "")
                      (set! parentesis2 "")
                      (set! indexParentesis1 0)
                      (set! indexParentesis2 0)
                      (set! str1 "")
                      (set! str2 "")
                      (set! bandera "no")
                      (set! spaceCounter 0)
                      (set! resOperacion 0)
                      (set! accParentesis1 0)
                      (set! accParentesis2 0)
                      (newline)
                      (main)
                      )             
                    )
                (if (equal? operacion "%")
                    (begin
                      (display "Su operacion modulo no se puede operar ya que esta anidada")
                      (set! parentesis1 "")
                      (set! operacion "")
                      (set! numero1 "")
                      (set! numero2 "")
                      (set! parentesis2 "")
                      (set! indexParentesis1 0)
                      (set! indexParentesis2 0)
                      (set! str1 "")
                      (set! str2 "")
                      (set! bandera "no")
                      (set! spaceCounter 0)
                      (set! resOperacion 0)
                      (set! accParentesis1 0)
                      (set! accParentesis2 0)
                      (newline)
                      (main)
                      )             
                    )
                (if (equal? operacion "fact!")
                    (begin
                      (display "Su operacion factorial no se puede operar ya que esta anidada")
                      (set! parentesis1 "")
                      (set! operacion "")
                      (set! numero1 "")
                      (set! numero2 "")
                      (set! parentesis2 "")
                      (set! indexParentesis1 0)
                      (set! indexParentesis2 0)
                      (set! str1 "")
                      (set! str2 "")
                      (set! bandera "no")
                      (set! spaceCounter 0)
                      (set! resOperacion 0)
                      (set! accParentesis1 0)
                      (set! accParentesis2 0)
                      (newline)
                      (main)
                      )             
                    )
                )
              )
          )(begin
             (display "Error, solo pueden existir 2 espacios en la operacion base")
             (set! parentesis1 "")
             (set! operacion "")
             (set! numero1 "")
             (set! numero2 "")
             (set! parentesis2 "")
             (set! indexParentesis1 0)
             (set! indexParentesis2 0)
             (set! str1 "")
             (set! str2 "")
             (set! bandera "no")
             (set! spaceCounter 0)
             (set! resOperacion 0)
             (set! accParentesis1 0)
             (set! accParentesis2 0)
             (newline)
             (main)
             )
           ) 
    (main)
    )
  )
; encuentraNumero funcion la cual se encarga de convertir los strings numericos en un valor concreto por ejemplo recibimos "34" y lo devolvera como 34
; recibe como parametros char->el cual es el caracter del valor y var-> el cual dira si es para el numero1 o el numero2
(define (encuentraNumero char var)
  (if (equal? var "numero1")
      (begin
        (if (number? numero1)
            (set! numero1 (number->string numero1))
            (set! numero2 0)
            )
        (if (or (equal? char "-") (equal? char "."))
            (set! numero1 (string-append numero1 char))
            (begin
              (set! numero1 (string-append numero1 char))
              (set! numero1 (string->number numero1))
              )
            )
        )
      (begin
        (if (number? numero2)
            (if (= numero2 0)
                (begin
                  (set! numero2 (number->string numero2))
                  (set! numero2 (substring numero2 0 1))
                  )
                (set! numero2 (number->string numero2))
                )
            )
        (if (or (equal? char "-") (equal? char "."))
            (begin
              (set! numero2 (string-append numero2 char))
              )            
            (begin             
              (set! numero2 (string-append numero2 char))
              (set! numero2 (string->number numero2))
              )
            )        
        )
      )
  )
;encuentraOperacion funcion la cual se encarga de anidar operaciones con mas de 1 caracter como cos,sen,tan...etc
;recibe como parametro char->el cual es el caracter que tiene en ese momento de la operacion
(define (encuentraOperacion char)
  (set! operacion (string-append operacion char))
  )

;operaciones funcion la cual se encarga de encontrar la operacion base de todo el string de operaciones que se ingrese
;recibe como parametros un str->el cual es la operacion completa, un contador para recorrer la operacion, cortador1 y cortador2 para tener un vector que corte cada caracter
(define (operaciones str cont cortador1 cortador2)
  (define longitud (string-length str))
  (if (equal? (substring str 0 1) "(")
      (begin
        (if (equal? bandera "no")
            (begin
              (if (< cont (string-length str))
                  (begin
                    (if (equal? (substring str cortador1 cortador2) " ")
                        (begin
                          (set! spaceCounter (+ spaceCounter 1))
                          (operaciones str (+ cont 1) (+ cortador1 1) (+ cortador2 1))
                          )
                        )                                  
                    (if (equal?(substring str cortador1 cortador2)"(")
                        (begin
                          (if (equal? parentesis1 "")
                              (begin
                                (set! parentesis1 "(")
                                (set! indexParentesis1 cont)
                                (operaciones str (+ cont 1) (+ cortador1 1) (+ cortador2 1))
                                )
                              (begin
                                (set! parentesis1 "(")
                                (set! indexParentesis1 cont)
                                (set! noOperation "no")
                                (set! numero1 "")
                                (set! numero2 "")
                                (set! spaceCounter 0)
                                (set! operacion "")
                                (set! parentesis2 "")
                                (operaciones str (+ cont 1) (+ cortador1 1) (+ cortador2 1))
                                )
                              )                    
                          )
                        )
                    (if (equal? noOperation "no")
                        (if (not (or (equal? operacion "%") (equal? operacion "+") (equal? operacion "-") (equal? operacion "/") (equal? operacion "*") (equal? operacion "fact!") (and (equal? operacion "sqr") (equal? (substring str (+ cortador1 1) (+ cortador2 1)) " "))  (equal? operacion "sqroot") (equal? operacion "sen") (equal? operacion "cos") (equal? operacion "tan") (equal? operacion "div")))
                            (if (and (equal? parentesis1 "(") (or (equal? (substring str cortador1 cortador2) "%") (equal? (substring str cortador1 cortador2) "+") (equal? (substring str cortador1 cortador2) "*") (equal? (substring str cortador1 cortador2) "-") (equal? (substring str cortador1 cortador2) "/") (equal? (substring str cortador1 cortador2) "d") (equal? (substring str cortador1 cortador2) "i") (equal? (substring str cortador1 cortador2) "v") (equal? (substring str cortador1 cortador2) "f") (equal? (substring str cortador1 cortador2) "a") (equal? (substring str cortador1 cortador2) "c") (equal? (substring str cortador1 cortador2) "t") (equal? (substring str cortador1 cortador2) "s") (equal? (substring str cortador1 cortador2) "q") (equal? (substring str cortador1 cortador2) "r") (equal? (substring str cortador1 cortador2) "o") (equal? (substring str cortador1 cortador2) "e") (equal? (substring str cortador1 cortador2) "n") (equal? (substring str cortador1 cortador2) "!")))
                                (begin
                                  (if (or (equal? (substring str cortador1 cortador2) "!") (equal? (substring str cortador1 cortador2) "d") (equal? (substring str cortador1 cortador2) "i") (equal? (substring str cortador1 cortador2) "v") (equal? (substring str cortador1 cortador2) "f") (equal? (substring str cortador1 cortador2) "a") (equal? (substring str cortador1 cortador2) "c") (equal? (substring str cortador1 cortador2) "t") (equal? (substring str cortador1 cortador2) "s") (equal? (substring str cortador1 cortador2) "q") (equal? (substring str cortador1 cortador2) "r") (equal? (substring str cortador1 cortador2) "o") (equal? (substring str cortador1 cortador2) "e") (equal? (substring str cortador1 cortador2) "n"))
                                      (begin
                                        (encuentraOperacion (substring str cortador1 cortador2))
                                        (operaciones str (+ cont 1) (+ cortador1 1) (+ cortador2 1))
                                        )
                                      (begin
                                        (set! operacion (substring str cortador1 cortador2))
                                        (operaciones str (+ cont 1) (+ cortador1 1) (+ cortador2 1))
                                        )
                                      )                          
                                  )
                                )
                            )
                        )
                    (if (and (equal? parentesis1 "(") (or (equal? operacion "%") (equal? operacion "+") (equal? operacion "*") (equal? operacion "-") (equal? operacion "/") (equal? operacion "fact!") (equal? operacion "sqr") (equal? operacion "sqroot") (equal? operacion "sen") (equal? operacion "cos") (equal? operacion "tan") (equal? operacion "div")) (not(string? numero1)) (not(string? numero2)) (equal? (substring str cortador1 cortador2) ")"))
                        (begin
                          (set! parentesis2 ")")
                          (set! indexParentesis2 cont)
                          (begin
                            (if (and (equal? parentesis1 "(") (or (equal? operacion "%") (equal? operacion "+") (equal? operacion "*") (equal? operacion "-") (equal? operacion "/") (equal? operacion "fact!") (equal? operacion "sqr") (equal? operacion "sqroot") (equal? operacion "sen") (equal? operacion "cos") (equal? operacion "tan") (equal? operacion "div")) (number? numero1) (number? numero2) (equal? parentesis2 ")"))
                                (resultado str)
                                (operaciones str (+ cont 1) (+ cortador1 1) (+ cortador2 1))
                                )
                            )
                          )
                        )
                    (if (= firstCut 1)
                        (if (and(equal? (substring str (- cortador1 1) (- cortador2 1)) " ") (or(number? numero2) (> (string-length numero2) 0)))
                            (if (and (equal? parentesis1 "(") (or (equal? operacion "%") (equal? operacion "+")  (equal? operacion "*") (equal? operacion "-") (equal? operacion "/") (equal? operacion "fact!") (equal? operacion "sqr") (equal? operacion "sqroot") (equal? operacion "sen") (equal? operacion "cos") (equal? operacion "tan") (equal? operacion "div")) (not(string? numero1)) (or(equal? (substring str cortador1 cortador2) "-") (equal? (substring str cortador1 cortador2) ".") (equal? (substring str cortador1 cortador2) "0") (equal? (substring str cortador1 cortador2) "1") (equal? (substring str cortador1 cortador2) "2") (equal? (substring str cortador1 cortador2) "3") (equal? (substring str cortador1 cortador2) "4") (equal? (substring str cortador1 cortador2) "5") (equal? (substring str cortador1 cortador2) "6") (equal? (substring str cortador1 cortador2) "7") (equal? (substring str cortador1 cortador2) "8") (equal? (substring str cortador1 cortador2) "9")))
                                (begin
                                  (set! firstCut 2)
                                  (encuentraNumero (substring str cortador1 cortador2) "numero2")
                                  (operaciones str (+ cont 1) (+ cortador1 1) (+ cortador2 1))
                                  )                   
                                )
                            )
                        (if (or(equal? (substring str (- cortador1 1) (- cortador2 1)) " ") (or(number? numero2) (> (string-length numero2) 0)))
                            (if (and (equal? parentesis1 "(") (or (equal? operacion "%") (equal? operacion "+")  (equal? operacion "*") (equal? operacion "-") (equal? operacion "/") (equal? operacion "fact!") (equal? operacion "sqr") (equal? operacion "sqroot") (equal? operacion "sen") (equal? operacion "cos") (equal? operacion "tan") (equal? operacion "div")) (not(string? numero1)) (or(equal? (substring str cortador1 cortador2) "-") (equal? (substring str cortador1 cortador2) ".") (equal? (substring str cortador1 cortador2) "0") (equal? (substring str cortador1 cortador2) "1") (equal? (substring str cortador1 cortador2) "2") (equal? (substring str cortador1 cortador2) "3") (equal? (substring str cortador1 cortador2) "4") (equal? (substring str cortador1 cortador2) "5") (equal? (substring str cortador1 cortador2) "6") (equal? (substring str cortador1 cortador2) "7") (equal? (substring str cortador1 cortador2) "8") (equal? (substring str cortador1 cortador2) "9")))
                                (begin
                                  (encuentraNumero (substring str cortador1 cortador2) "numero2")
                                  (operaciones str (+ cont 1) (+ cortador1 1) (+ cortador2 1))
                                  )                   
                                )
                            )
                        )
                    (if (and (equal? parentesis1 "(") (or (equal? operacion "%") (equal? operacion "+") (equal? operacion "*") (equal? operacion "-") (equal? operacion "/") (equal? operacion "fact!") (equal? operacion "sqr") (equal? operacion "sqroot") (equal? operacion "sen") (equal? operacion "cos") (equal? operacion "tan") (equal? operacion "div")) (or (equal? numero2 "") (= numero2 0)) (or (equal? (substring str cortador1 cortador2) "-") (equal? (substring str cortador1 cortador2) ".") (equal? (substring str cortador1 cortador2) "0") (equal? (substring str cortador1 cortador2) "1") (equal? (substring str cortador1 cortador2) "2") (equal? (substring str cortador1 cortador2) "3") (equal? (substring str cortador1 cortador2) "4") (equal? (substring str cortador1 cortador2) "5") (equal? (substring str cortador1 cortador2) "6") (equal? (substring str cortador1 cortador2) "7") (equal? (substring str cortador1 cortador2) "8") (equal? (substring str cortador1 cortador2) "9")))
                        (begin
                          (set! noOperation "yes")
                          (encuentraNumero (substring str cortador1 cortador2) "numero1")
                          (operaciones str (+ cont 1) (+ cortador1 1) (+ cortador2 1))
                          )
                        )
                    )
                  )
              )
            )
        ) ( begin
             (display "ERROR! Expresion no valida")
             (set! parentesis1 "")
             (set! operacion "")
             (set! numero1 "")
             (set! numero2 "")
             (set! parentesis2 "")
             (set! indexParentesis1 0)
             (set! indexParentesis2 0)
             (set! str1 "")
             (set! str2 "")
             (set! bandera "no")
             (set! spaceCounter 0)
             (set! resOperacion 0)
             (set! accParentesis1 0)
             (set! accParentesis2 0)
             (newline)
             (main)
             )
          )
  
  )

;validNumber? es la funcion que se encarga de verificar si la operacion que se ingresa es una operacion o es solo un valor
;recibe como parametros char el cual es el caracter, var el cual es el que dice si la operacion es valida o no, cont el cual es el contador, str el cual es la operacion completa
(define (validNumber? char var cont str)
  (if (equal? var "valid?")
      (begin
        (if (number? validNumber)
            (set! validNumber (number->string validNumber))
            )
        (set! validNumber (string-append validNumber char))
        (set! validNumber (string->number validNumber))
        (if (= cont (-(string-length str)1))
            (begin
              (set! onlyNumber "yes")
              )
            )
        )
      (set! onlyNumber "no")
      )
  )

;findBase funcion la cual se encarga de encontrar la operacion base en un caso que sea (((+ 3 4)))
;recibe como parametros str el cual es la operacion y cont el cual es un contador
(define (findBase str cont)
  (if (and(equal? (substring str cont (+ cont 1)) "(") (or (equal? (substring str (+ cont 1) (+ cont 2)) "%") (equal? (substring str (+ cont 1) (+ cont 2)) "+") (equal? (substring str (+ cont 1) (+ cont 2)) "*") (equal? (substring str (+ cont 1) (+ cont 2)) "-") (equal? (substring str (+ cont 1) (+ cont 2)) "/") (equal? (substring str (+ cont 1) (+ cont 2)) "d") (equal? (substring str (+ cont 1) (+ cont 2)) "i") (equal? (substring str (+ cont 1) (+ cont 2)) "v") (equal? (substring str (+ cont 1) (+ cont 2)) "f") (equal? (substring str (+ cont 1) (+ cont 2)) "a") (equal? (substring str (+ cont 1) (+ cont 2)) "c") (equal? (substring str (+ cont 1) (+ cont 2)) "t") (equal? (substring str (+ cont 1) (+ cont 2)) "s") (equal? (substring str (+ cont 1) (+ cont 2)) "q") (equal? (substring str (+ cont 1) (+ cont 2)) "r") (equal? (substring str (+ cont 1) (+ cont 2)) "o") (equal? (substring str (+ cont 1) (+ cont 2)) "e") (equal? (substring str (+ cont 1) (+ cont 2)) "n") (equal? (substring str (+ cont 1) (+ cont 2)) "!")))
      (begin
        (display str)
        (newline)
        (set! str (substring str cont (- (string-length str) cont )))
        (operaciones str 0 0 1)
        )
      (findBase str (+ cont 1))
      )
  )

;validParentesis funcion la cual se encarga de verificar si la operacion es valida para mandar a ejecutar findbase
;recibe como parametros str el cual es la operacion y cont el cual es el contador
(define (validParentesis str cont)
  (if (< cont (string-length str))
      (begin
        (if (equal? canSearch "yes")
            (findBase str 0)
            )
        (if (and (equal? (substring str cont (+ cont 1)) "(") (equal? (substring str (+ cont 1) (+ cont 2)) "("))
            (begin
              (set! canSearch "yes")
              (findBase str 0)
              )
            )
        )
      (operaciones str 0 0 1)
      )
  (validParentesis str (+ cont 1))
  )

;validExpression es la funcion la cual se encarga de verificar que la operacion sea valida y de lo contrario mandara a llamar a las funciones respectivas para desplegar error
;recibe como parametros str el cual es la operacion y cont el cual es el contador
(define (validExpression? str cont)
  (if (and(equal? (substring str 0 1) ")") (equal? (substring str (-(string-length str)1) (string-length str))"("))
      (begin
        (display "Por favor ingrese el orden de los parentesis correctamente")
        (set! parentesis1 "")
        (set! operacion "")
        (set! numero1 "")
        (set! numero2 "")
        (set! parentesis2 "")
        (set! indexParentesis1 0)
        (set! indexParentesis2 0)
        (set! str1 "")
        (set! str2 "")
        (set! bandera "no")
        (set! spaceCounter 0)
        (set! resOperacion 0)
        (set! accParentesis1 0)
        (set! accParentesis2 0)
        (newline)
        (main)
        )      
      )
  (if (equal? str "()")
      (begin
        (display "por favor ingrese valores adentro de su parentesis")
        (set! parentesis1 "")
        (set! operacion "")
        (set! numero1 "")
        (set! numero2 "")
        (set! parentesis2 "")
        (set! indexParentesis1 0)
        (set! indexParentesis2 0)
        (set! str1 "")
        (set! str2 "")
        (set! bandera "no")
        (set! spaceCounter 0)
        (set! resOperacion 0)
        (set! accParentesis1 0)
        (set! accParentesis2 0)
        (newline)
        (main)
        )
      )
  (if (= cont (string-length str))
      (begin
        (if (not(and(= accParentesis1 0) (= accParentesis2 0)))
            (begin
              (if (= accParentesis1 accParentesis2)
                  (begin
                    (validParentesis str 0)
                    )
                  (begin
                    (display "La cantidad de parentesis no caza ")
                    (display "usted tiene ")
                    (display accParentesis1)
                    (display " abiertos y ")
                    (display accParentesis2)
                    (display " cerrados")
                    (set! onlyNumber "no")
                    (set! parentesis1 "")
                    (set! operacion "")
                    (set! numero1 "")
                    (set! numero2 "")
                    (set! parentesis2 "")
                    (set! indexParentesis1 0)
                    (set! indexParentesis2 0)
                    (set! str1 "")
                    (set! str2 "")
                    (set! bandera "no")
                    (set! spaceCounter 0)
                    (set! resOperacion 0)
                    (set! accParentesis1 0)
                    (set! accParentesis2 0)
                    (newline)
                    (main)
                    )
                  )
              )
            )
        )
      )
  (if (< cont (string-length str))
      (begin
        (if (equal? (substring str cont (+ cont 1)) "(" )
            (begin
              (set! accParentesis1 (+ accParentesis1 1))              
              )
            )
        (if (equal? (substring str cont (+ cont 1)) ")" )
            (begin
              (set! accParentesis2 (+ accParentesis2 1))             
              )
            )
        (if (or (> accParentesis1 0) (> accParentesis2 0))
            (display "")
            (begin
              (if (or (equal?(substring str cont (+ cont 1))"0") (equal?(substring str cont (+ cont 1))"1") (equal?(substring str cont (+ cont 1))"2") (equal?(substring str cont (+ cont 1))"3") (equal?(substring str cont (+ cont 1))"4") (equal?(substring str cont (+ cont 1))"5") (equal?(substring str cont (+ cont 1))"6") (equal?(substring str cont (+ cont 1))"7") (equal?(substring str cont (+ cont 1))"8") (equal?(substring str cont (+ cont 1))"9"))
                  (validNumber? (substring str cont (+ cont 1)) "valid?" cont str)
                  (validExpression? str (+ cont 1))
                  )
              (if (equal?(substring str cont (+ cont 1))" ")
                  (validNumber? (substring str cont (+ cont 1)) "notValid" cont str)
                  )
              (if (equal? onlyNumber "yes")
                  (begin
                    (set! onlyNumber "no")
                    (set! parentesis1 "")
                    (set! operacion "")
                    (set! numero1 "")
                    (set! numero2 "")
                    (set! parentesis2 "")
                    (set! indexParentesis1 0)
                    (set! indexParentesis2 0)
                    (set! str1 "")
                    (set! str2 "")
                    (set! bandera "no")
                    (set! spaceCounter 0)
                    (set! resOperacion 0)
                    (set! accParentesis1 0)
                    (set! accParentesis2 0)             
                    (display "Su valor es ")
                    (display validNumber)
                    (set! validNumber "")
                    )
                  )
              )
            )
        (validExpression? str (+ cont 1))
        )
      (begin
        (newline)
        (main)
        )
      )
  )

;Mensaje de Bienvenida a la aplicacion

(display "Bienvenido a nuestra calculadora este es el:")
(newline)
(display "Proyecto#1 CC1")
(newline)

;main funcion la cual se encarga de mandar a llamar la operacion inicial y empezar el proceso
(define (main)
  (display "calculadora>>")
  (define operacion (read-line))
  (if (equal? operacion "quit")
      (salida)
      (validExpression? operacion 0)
      )
  )
;funcion salida la cual se encarga de finalizar todos los procesos
(define (salida)
  (display "Saliendo ... ")
  (newline)
  (display "Gracias por usar nuestra calculadora.")
  (exit)
  )

(main)
